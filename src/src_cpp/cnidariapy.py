# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cnidariapy', [dirname(__file__)])
        except ImportError:
            import _cnidariapy
            return _cnidariapy
        if fp is not None:
            try:
                _mod = imp.load_module('_cnidariapy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cnidariapy = swig_import_helper()
    del swig_import_helper
else:
    import _cnidariapy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cnidariapy.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cnidariapy.SwigPyIterator_value(self)
    def incr(self, n=1): return _cnidariapy.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cnidariapy.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cnidariapy.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cnidariapy.SwigPyIterator_equal(self, *args)
    def copy(self): return _cnidariapy.SwigPyIterator_copy(self)
    def next(self): return _cnidariapy.SwigPyIterator_next(self)
    def __next__(self): return _cnidariapy.SwigPyIterator___next__(self)
    def previous(self): return _cnidariapy.SwigPyIterator_previous(self)
    def advance(self, *args): return _cnidariapy.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cnidariapy.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cnidariapy.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cnidariapy.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cnidariapy.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cnidariapy.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cnidariapy.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cnidariapy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _cnidariapy.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cnidariapy.vectors___nonzero__(self)
    def __bool__(self): return _cnidariapy.vectors___bool__(self)
    def __len__(self): return _cnidariapy.vectors___len__(self)
    def pop(self): return _cnidariapy.vectors_pop(self)
    def __getslice__(self, *args): return _cnidariapy.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _cnidariapy.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _cnidariapy.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _cnidariapy.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _cnidariapy.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _cnidariapy.vectors___setitem__(self, *args)
    def append(self, *args): return _cnidariapy.vectors_append(self, *args)
    def empty(self): return _cnidariapy.vectors_empty(self)
    def size(self): return _cnidariapy.vectors_size(self)
    def clear(self): return _cnidariapy.vectors_clear(self)
    def swap(self, *args): return _cnidariapy.vectors_swap(self, *args)
    def get_allocator(self): return _cnidariapy.vectors_get_allocator(self)
    def begin(self): return _cnidariapy.vectors_begin(self)
    def end(self): return _cnidariapy.vectors_end(self)
    def rbegin(self): return _cnidariapy.vectors_rbegin(self)
    def rend(self): return _cnidariapy.vectors_rend(self)
    def pop_back(self): return _cnidariapy.vectors_pop_back(self)
    def erase(self, *args): return _cnidariapy.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _cnidariapy.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cnidariapy.vectors_push_back(self, *args)
    def front(self): return _cnidariapy.vectors_front(self)
    def back(self): return _cnidariapy.vectors_back(self)
    def assign(self, *args): return _cnidariapy.vectors_assign(self, *args)
    def resize(self, *args): return _cnidariapy.vectors_resize(self, *args)
    def insert(self, *args): return _cnidariapy.vectors_insert(self, *args)
    def reserve(self, *args): return _cnidariapy.vectors_reserve(self, *args)
    def capacity(self): return _cnidariapy.vectors_capacity(self)
    __swig_destroy__ = _cnidariapy.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _cnidariapy.vectors_swigregister
vectors_swigregister(vectors)

__CNIDARIA_VERSION__ = _cnidariapy.__CNIDARIA_VERSION__
DEFAULT_BASENAME = _cnidariapy.DEFAULT_BASENAME
DEFAULT_MIN_NUMBER_SPP_PERC = _cnidariapy.DEFAULT_MIN_NUMBER_SPP_PERC
DEFAULT_MAX_NUMBER_SPP_PERC = _cnidariapy.DEFAULT_MAX_NUMBER_SPP_PERC
DEFAULT_MAX_DB_SIZE_EXPONENT = _cnidariapy.DEFAULT_MAX_DB_SIZE_EXPONENT
class intPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val1"] = _cnidariapy.intPair_val1_set
    __swig_getmethods__["val1"] = _cnidariapy.intPair_val1_get
    if _newclass:val1 = _swig_property(_cnidariapy.intPair_val1_get, _cnidariapy.intPair_val1_set)
    __swig_setmethods__["val2"] = _cnidariapy.intPair_val2_set
    __swig_getmethods__["val2"] = _cnidariapy.intPair_val2_get
    if _newclass:val2 = _swig_property(_cnidariapy.intPair_val2_get, _cnidariapy.intPair_val2_set)
    def __init__(self): 
        this = _cnidariapy.new_intPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cnidariapy.delete_intPair
    __del__ = lambda self : None;
intPair_swigregister = _cnidariapy.intPair_swigregister
intPair_swigregister(intPair)


def fact(*args):
  return _cnidariapy.fact(*args)
fact = _cnidariapy.fact

def openoutfile(*args):
  return _cnidariapy.openoutfile(*args)
openoutfile = _cnidariapy.openoutfile

def openinfile(*args):
  return _cnidariapy.openinfile(*args)
openinfile = _cnidariapy.openinfile

def merge_complete(*args):
  return _cnidariapy.merge_complete(*args)
merge_complete = _cnidariapy.merge_complete

def merge_complete_parallel(*args):
  return _cnidariapy.merge_complete_parallel(*args)
merge_complete_parallel = _cnidariapy.merge_complete_parallel

def merge_complete_parallel_piece(*args):
  return _cnidariapy.merge_complete_parallel_piece(*args)
merge_complete_parallel_piece = _cnidariapy.merge_complete_parallel_piece

def merge_matrix(*args):
  return _cnidariapy.merge_matrix(*args)
merge_matrix = _cnidariapy.merge_matrix

def merge_matrixj(*args):
  return _cnidariapy.merge_matrixj(*args)
merge_matrixj = _cnidariapy.merge_matrixj
class piece_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, piece_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, piece_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcfiles"] = _cnidariapy.piece_data_srcfiles_set
    __swig_getmethods__["srcfiles"] = _cnidariapy.piece_data_srcfiles_get
    if _newclass:srcfiles = _swig_property(_cnidariapy.piece_data_srcfiles_get, _cnidariapy.piece_data_srcfiles_set)
    __swig_setmethods__["out_file"] = _cnidariapy.piece_data_out_file_set
    __swig_getmethods__["out_file"] = _cnidariapy.piece_data_out_file_get
    if _newclass:out_file = _swig_property(_cnidariapy.piece_data_out_file_get, _cnidariapy.piece_data_out_file_set)
    __swig_setmethods__["num_threads"] = _cnidariapy.piece_data_num_threads_set
    __swig_getmethods__["num_threads"] = _cnidariapy.piece_data_num_threads_get
    if _newclass:num_threads = _swig_property(_cnidariapy.piece_data_num_threads_get, _cnidariapy.piece_data_num_threads_set)
    __swig_setmethods__["minVal"] = _cnidariapy.piece_data_minVal_set
    __swig_getmethods__["minVal"] = _cnidariapy.piece_data_minVal_get
    if _newclass:minVal = _swig_property(_cnidariapy.piece_data_minVal_get, _cnidariapy.piece_data_minVal_set)
    __swig_setmethods__["save_every"] = _cnidariapy.piece_data_save_every_set
    __swig_getmethods__["save_every"] = _cnidariapy.piece_data_save_every_get
    if _newclass:save_every = _swig_property(_cnidariapy.piece_data_save_every_get, _cnidariapy.piece_data_save_every_set)
    __swig_setmethods__["export_complete"] = _cnidariapy.piece_data_export_complete_set
    __swig_getmethods__["export_complete"] = _cnidariapy.piece_data_export_complete_get
    if _newclass:export_complete = _swig_property(_cnidariapy.piece_data_export_complete_get, _cnidariapy.piece_data_export_complete_set)
    __swig_setmethods__["export_summary"] = _cnidariapy.piece_data_export_summary_set
    __swig_getmethods__["export_summary"] = _cnidariapy.piece_data_export_summary_get
    if _newclass:export_summary = _swig_property(_cnidariapy.piece_data_export_summary_get, _cnidariapy.piece_data_export_summary_set)
    __swig_setmethods__["export_matrix"] = _cnidariapy.piece_data_export_matrix_set
    __swig_getmethods__["export_matrix"] = _cnidariapy.piece_data_export_matrix_get
    if _newclass:export_matrix = _swig_property(_cnidariapy.piece_data_export_matrix_get, _cnidariapy.piece_data_export_matrix_set)
    __swig_setmethods__["num_pieces"] = _cnidariapy.piece_data_num_pieces_set
    __swig_getmethods__["num_pieces"] = _cnidariapy.piece_data_num_pieces_get
    if _newclass:num_pieces = _swig_property(_cnidariapy.piece_data_num_pieces_get, _cnidariapy.piece_data_num_pieces_set)
    __swig_setmethods__["piece_num"] = _cnidariapy.piece_data_piece_num_set
    __swig_getmethods__["piece_num"] = _cnidariapy.piece_data_piece_num_get
    if _newclass:piece_num = _swig_property(_cnidariapy.piece_data_piece_num_get, _cnidariapy.piece_data_piece_num_set)
    __swig_setmethods__["merger"] = _cnidariapy.piece_data_merger_set
    __swig_getmethods__["merger"] = _cnidariapy.piece_data_merger_get
    if _newclass:merger = _swig_property(_cnidariapy.piece_data_merger_get, _cnidariapy.piece_data_merger_set)
    __swig_setmethods__["locker"] = _cnidariapy.piece_data_locker_set
    __swig_getmethods__["locker"] = _cnidariapy.piece_data_locker_get
    if _newclass:locker = _swig_property(_cnidariapy.piece_data_locker_get, _cnidariapy.piece_data_locker_set)
    def __init__(self, *args): 
        this = _cnidariapy.new_piece_data(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cnidariapy.delete_piece_data
    __del__ = lambda self : None;
piece_data_swigregister = _cnidariapy.piece_data_swigregister
piece_data_swigregister(piece_data)


def send_pieces(*args):
  return _cnidariapy.send_pieces(*args)
send_pieces = _cnidariapy.send_pieces

def send_piece(*args):
  return _cnidariapy.send_piece(*args)
send_piece = _cnidariapy.send_piece

def send_data(*args):
  return _cnidariapy.send_data(*args)
send_data = _cnidariapy.send_data

def merge_data(*args):
  return _cnidariapy.merge_data(*args)
merge_data = _cnidariapy.merge_data

def dump(*args):
  return _cnidariapy.dump(*args)
dump = _cnidariapy.dump
# This file is compatible with both classic and new-style classes.


